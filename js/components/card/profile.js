/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import React, { Component } from 'react';import { connect } from 'react-redux';import { popRoute } from '../../actions/route';import { openDrawer } from '../../actions/drawer';import {AppRegistry,StyleSheet,Image,TouchableOpacity,AsyncStorage,Dimensions,View,ScrollView} from 'react-native';import { Container, Header, Title, Content, Text, Button, Icon } from 'native-base';import Video from 'react-native-video';import styles from './profileStyles';import VideoPlayer from 'react-native-video-player';import dummies from './dummyCards';var femaleCards = dummies.femaleCards;var maleCards = dummies.maleCards;var {height, width} = Dimensions.get('window');var imageHolder= require('../../../images/imageHolder.png');var logoImage = require('../../../images/cupid.png');const appLogo = require('../../../images/movely.png');var emptyArray =[];var interestReadyRowOne = [];var interestReadyRowTwo = [];var imageReadyFemale =[];var imageReadyMale =[];var profileReady =[];class Profile extends Component {  constructor(props) {    super(props)    this.state = {      interestsRowOne: interestReadyRowOne,      interestsRowTwo: interestReadyRowTwo,      mainImageSource: "",      imageArray: emptyArray,      mainVideoSource: "",      verifier: 'video',      thumbnail: "default",      videoArray: null,      profileJSON: emptyArray,      name: "",    }  }  genderVerifyingFunction = async() => {    try {      var genderValue = await AsyncStorage.getItem("@user_gender")      var cardIndex = await AsyncStorage.getItem("@card_index")      var intCardIndex = JSON.parse(cardIndex);      if (genderValue !== null && genderValue == "M" && intCardIndex !== null) {        for (let index2 in femaleCards[intCardIndex].image[0]) {          imageReadyFemale.push(femaleCards[intCardIndex].image[0][index2]);        }        for (let index in femaleCards[intCardIndex].interestsGroup[0]) {          interestReadyRowOne.push(femaleCards[intCardIndex].interestsGroup[0][index]);        }        for (let index in femaleCards[intCardIndex].interestsGroup[1]) {          interestReadyRowTwo.push(femaleCards[intCardIndex].interestsGroup[1][index]);        }        this.setState({          imageArray: imageReadyFemale,          mainImageSource: imageReadyFemale[0],          mainVideoSource: femaleCards[intCardIndex].video[0].link1,          thumbnail: femaleCards[intCardIndex].videoThumbnail,          profileJSON: femaleCards[intCardIndex],          name: femaleCards[intCardIndex].first_name,          interestsRowOne: interestReadyRowOne,          interestsRowTwo: interestReadyRowTwo,        })      } else if (genderValue !== null && genderValue == "F" && intCardIndex !== null) {        for (let index2 in maleCards[intCardIndex].image[0]) {          imageReadyMale.push(maleCards[intCardIndex].image[0][index2]);        }        for (let index in maleCards[intCardIndex].interestsGroup[0]) {          interestReadyRowOne.push(maleCards[intCardIndex].interestsGroup[0][index]);        }        for (let index in maleCards[intCardIndex].interestsGroup[1]) {          interestReadyRowTwo.push(maleCards[intCardIndex].interestsGroup[1][index]);        }        this.setState({          imageArray: imageReadyMale,          mainImageSource: imageReadyMale[0],          mainVideoSource: maleCards[intCardIndex].video[0].link1,          thumbnail: maleCards[intCardIndex].videoThumbnail,          profileJSON: maleCards[intCardIndex],          name: maleCards[intCardIndex].first_name,          interestsRowOne: interestReadyRowOne,          interestsRowTwo: interestReadyRowTwo,        })      }    } catch (e) {      alert(e);    }  }  static propTypes = {    popRoute: React.PropTypes.func,    openDrawer: React.PropTypes.func,  }  popRoute() {    this.props.popRoute();  }  componentWillMount() {    imageReadyMale = [];    imageReadyFemale = [];    profileReady = [];    interestReadyRowOne = [];    interestReadyRowTwo = [];    this.genderVerifyingFunction();  }  changeImage(source) {    this.setState({      mainImageSource: source,      verifier: "image",      isChanging: false,    })  }  playVideo(source) {    this.setState({      mainVideoSource: source,      verifier: "video",    })  }  createVideoOrImageComponent = function (verifier) {    if (verifier == "video") {      return (        <VideoPlayer          playInBackground={false}          playWhenInactive={false}          endWithThumbnail={true}          style={{height: 330, width: width, padding: 20}}          thumbnail={{uri: this.state.thumbnail}}          video={{uri: this.state.mainVideoSource}}          videoWidth={width}          videoHeight={330}          resizeMode="cover"          customStyles={{seekBarProgress: {backgroundColor: "#bcbddb"}}}          hideControlsOnStart={false}          autoplay={false}        />      )    } else if (verifier == "image") {      return (        <Image source={imageHolder} resizeMode="cover"               style={{width: width, height: 330, paddingBottom: 10, backgroundColor: 'dimgray'}}>          <Image source={{uri: this.state.mainImageSource}} resizeMode="cover"                 style={{width: width, height: 330, paddingBottom: 10, backgroundColor: 'dimgray'}}/>        </Image>      )    }  }  render() {    return (      <Container style={{flex: 1}}>        <Header style={{backgroundColor: "#bcbddb"}}>          <Button transparent onPress={() => this.popRoute()}>            <Icon name="ios-backspace" color={'white'}/>          </Button>          <Button transparent onPress={this.props.openDrawer}>            <Icon name="ios-menu" color={'white'}/>          </Button>          <Title style={{alignSelf: 'center'}}>            <Image source={appLogo} resizeMode="cover" style={{width: 80, height: 40}}/></Title>        </Header>        <ScrollView style={styles.container}>          <View style={styles.card}>            <View style={{              flex: 1,              flexDirection: 'row',              justifyContent: 'center',              alignSelf: 'center',              height: 70,              backgroundColor: "floralwhite",            }}>              <Image source={{uri: this.state.imageArray[0]}} resizeMode="cover"                     style={{width: 60, height: 60, borderRadius: 30, margin: 5,}}/>              <View style={{flex: 5, justifyContent: 'center',}}>                <Text style={{                  fontSize: 15,                  fontWeight: 'bold',                  color: 'dimgray'                }}>{this.state.profileJSON.first_name + " (" + this.state.profileJSON.age + "세)"}</Text>                <Text style={{fontSize: 15, color: 'dimgray'}}>{this.state.profileJSON.job}</Text>              </View>              <View style={{width: 80, justifyContent: 'center', alignSelf: 'center'}}>                <Image source={logoImage} resizeMode="contain" style={{width: 45, height: 45, alignSelf: 'center'}}/>              </View>            </View>            <View style={{height: 330, width: width}}>              {                this.createVideoOrImageComponent(this.state.verifier)              }            </View>          </View>          <View style={{            flexDirection: 'column',            margin: 10,            marginBottom: 0,            alignItems: 'flex-start',            marginTop: 10, borderWidth: 1,            borderColor: '#e3e3e3',            backgroundColor: 'white',          }}>            <Text style={styles.title}>              Photos            </Text>            <ScrollView horizontal={true} scrollEnabled={true}>              <View style={{flex: 1, flexDirection: 'row'}}>                <TouchableOpacity onPress={() => this.playVideo(this.state.mainVideoSource)}>                  <Image source={{uri: this.state.thumbnail}} resizeMode="cover"                         style={{width: 50, height: 50, margin: 5, borderRadius: 5}}/>                </TouchableOpacity>                {                  this.state.imageArray.map((item, index) => {                    return (                      <TouchableOpacity key={index} onPress={() => this.changeImage(item)}>                        <Image key={index} source={{uri: item}} resizeMode="cover"                               style={{width: 50, height: 50, margin: 5, borderRadius: 5}}/>                      </TouchableOpacity>                    )                  })                }              </View>            </ScrollView>          </View>          <View style={{            flexDirection: 'row',            margin: 10,            marginBottom: 0,            alignItems: 'flex-start',            marginTop: 10, borderWidth: 1,            borderColor: '#e3e3e3',            backgroundColor: 'white',          }}>            <Icon name="ios-create" style={{              color: "#888",              width: 70,              textAlign: 'center',              paddingTop: 5,              paddingBottom: 5,              paddingLeft: 10,              paddingRight: 5,              alignSelf: 'center'            }}/>            <Text              style={{flex: 1, padding: 5, fontSize: 16, color: 'dimgray'}}>{this.state.profileJSON.self_intro}</Text>          </View>          <View style={{            flexDirection: 'column',            margin: 10,            marginBottom: 0,            alignItems: 'flex-start',            marginTop: 10, borderWidth: 1,            borderColor: '#e3e3e3',            backgroundColor: 'white',          }}>            <View style={{flexDirection: 'row',}}>              <Text name="ios-create" style={{                color: "#888",                width: 70,                fontSize: 17,                fontWeight: 'bold',                paddingTop: 5,                paddingBottom: 5,                paddingLeft: 10,                paddingRight: 5,                textAlign: 'center',                alignSelf: 'center'              }}>성격</Text>              <Text style={{                flex: 1,                padding: 5,                fontSize: 16,                color: 'dimgray'              }}>{this.state.profileJSON.personality}</Text>            </View>            <View style={{flexDirection: 'row',}}>              <Text name="ios-create" style={{                color: "#888",                width: 70,                fontSize: 17,                fontWeight: 'bold',                paddingTop: 5,                paddingBottom: 5,                paddingLeft: 10,                paddingRight: 5,                textAlign: 'center',                alignSelf: 'center'              }}>취미</Text>              <Text                style={{flex: 1, padding: 5, fontSize: 16, color: 'dimgray'}}>{this.state.profileJSON.hobbies}</Text>            </View>            <View style={{flexDirection: 'row',}}>              <Text name="ios-create" style={{                color: "#888",                width: 70,                fontSize: 17,                fontWeight: 'bold',                paddingTop: 5,                paddingBottom: 5,                paddingLeft: 10,                paddingRight: 5,                textAlign: 'center',                alignSelf: 'center'              }}>이상형</Text>              <Text                style={{flex: 1, padding: 5, fontSize: 16, color: 'dimgray'}}>{this.state.profileJSON.datePref}</Text>            </View>            <View style={{flexDirection: 'row',}}>              <Text name="ios-create" style={{                color: "#888",                width: 70,                fontSize: 17,                fontWeight: 'bold',                paddingTop: 5,                paddingLeft: 10,                paddingRight: 5,                textAlign: 'center',                alignSelf: 'center'              }}>관심사</Text>            </View>            <View style={{flex: 1, flexDirection: 'row',}}>              <View style={{flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>                {                  this.state.interestsRowOne.map((item, index) => {                    return (                      <View key={index} style={{                        flexWrap: 'wrap',                        margin: 5,                        borderWidth: 1,                        borderColor: '#e3e3e3',                        borderRadius: 16,                        backgroundColor: 'floralwhite'                      }}>                        <Text key={index} style={{                          flex: 1,                          fontSize: 16,                          paddingRight: 8,                          paddingLeft: 8,                          color: 'dimgray',                          margin: 2,                        }}>{"#" + item}</Text>                      </View>                    )                  })                }              </View>            </View>            <View style={{flex: 1, flexDirection: 'row',}}>              <View style={{flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>                {                  this.state.interestsRowTwo.map((item, index) => {                    return (                      <View key={index} style={{                        flexWrap: 'wrap',                        margin: 5,                        borderWidth: 1,                        borderColor: '#e3e3e3',                        borderRadius: 16,                        backgroundColor: 'floralwhite'                      }}>                        <Text key={index} style={{                          flex: 1,                          fontSize: 16,                          paddingRight: 8,                          paddingLeft: 8,                          color: 'dimgray',                          margin: 2,                        }}>{"#" + item}</Text>                      </View>                    )                  })                }              </View>            </View>          </View>        </ScrollView>      </Container>    )  }}//onPress = {() => this.renderNope()} function bindAction(dispatch) {return {  openDrawer: () => dispatch(openDrawer()),  popRoute: () => dispatch(popRoute()),};}function mapStateToProps(state) {  return {    name: state.user.name,    index: state.list.selectedIndex,    list: state.list.list,  };}export default connect(mapStateToProps, bindAction)(Profile);